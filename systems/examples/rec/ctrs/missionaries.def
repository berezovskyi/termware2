
#
# Missionaries and Cannibals.
#  from WRLA Rewrite Engines Competition.
#
#

domain(examples,
 domain(rec,
  domain(ctrs,
    #@option(reduceInFacts(true))
    #--@option(loggedEntity(SystemReductions))
    #--@option(loggedEntity(All))
    system(missionaries,default, 
     ruleset(

     $X && true -> $X,
     true && $X -> $X,
     $X && false -> false,
     false && $X -> false,
     $X || true -> true,
     $X || false -> $X,
     true || $X -> true,
     false || $X -> $X,
     !false -> true,
     !true -> false,
     !(!($X)) -> $X,
     s(p($X)) -> $X,
     p(s($X)) -> $X,
     0 + $Y -> $Y,
     $Y+ 0 -> $Y,
     s($X) + $Y -> s($X+$Y),
     p($X) + $Y -> p($X+$Y),
     0 >= 0 -> true,
     0 >= s($X) -> false,
     s($X) >= $Y -> $X >= p($Y),
     p($X) >= $Y -> $X >= s($Y),
     0 >= p($Y) [ 0 >= $Y ] -> true,
     0 >= s($Y) [ 0 >= $Y ] -> false,
     equals($X,$Y) -> $X >= $Y && $Y >= $X,
     1 -> s(0),
     2 -> s(s(0)),
     -1 -> p(0),
     -2 -> p(p(0)),
     3 -> s(s(s(0))),
     moves ->
       cm(mov(missionary_rows_east, -1, 0, 1, 0, east),
       cm(mov(two_missionaries_row_east, -2, 0, 2, 0, east),
       cm(mov(missionary_and_cannibal_row_east, -1, -1, 1, 1, east),
       cm(mov(cannibal_rows_east, 0, -1, 0, 1, east),
       cm(mov(two_cannibals_row_east, 0, -2, 0, 2, east),
       cm(mov(missionary_rows_west, 1, 0, -1, 0, west),
       cm(mov(two_missionaries_row_west, 2, 0, -2, 0, west),
       cm(mov(missionary_and_cannibal_row_west, 1, 1, -1, -1, west),
       cm(mov(cannibal_rows_west, 0, 1, 0, -1, west),
       cm(mov(two_cannibals_row_west, 0, 2, 0, -2, west), nil)))))))))),
     member($NP,nil) -> false,
     member($NP,cp($NP,$Prev)) -> true,
     member($NP,cp($Pos,$Prev)) -> member($NP,$Prev),

     ct($T,fail) -> fail,
     $TL >= nil  -> true,
     nil >= ct($T,$TL) -> false,
     ct($T,$TL) >= ct($T2,$TL2) -> $TL >= $TL2,
     best(fail,$TL) -> $TL,
     best($TL,fail) -> $TL,
     best($TL,$TL2) [ $TL >= $TL2 && $TL!=fail && $TL2!=fail ] -> $TL2,
     best($TL,$TL2) [ !($TL >= $TL2) && $TL!=fail && $TL2!=fail ] -> $TL2,

     solve($Pos,$Pos,$Prev) -> nil,
     solve($Pos,$Final,$Prev)  -> try(moves, $Pos, $Final, $Prev),
     try(nil,$Pos,$Final, $Prev) -> fail,
     try(cm($M,$ML),$Pos,$Final,$Prev) -> 
             best(apply($M,$Pos,$Final,$Prev),try($ML,$Pos,$Final,$Prev)),

     apply(mov($T,$DMW,$DCW,$DME,$DCE,$D),
           pos($B,$MW,$CW,$ME,$CE),$Final,$Prev) 
       [ $D != $B ] ->
           check($T,pos($D,$MW+$DMW,$CW+$DCW,$ME+$DME,$CE+$DCE),$Final,$Prev)
                 !->
                    fail,

    # it is port of original REC rule, which was with error
    # check($T,$NP,$Final,$Prev) 
    #  [ !member($NP,$Prev) && valid($NP) ]-> 
    #                              ct($T,solve($NP,$Final,cp($NP,$Prev))) 
    #  |
    #   [ member($NP,$Prev) ] ->   ct($T,solve($NP,$Final,cp($NP,$Prev))) 
    #  |
    #   [ !valid($NP) ]       ->   ct($T,solve($NP,$Final,cp($NP,$Prev))) 
    #  ,

    check($T,$NP,$Final,$Prev) 
      [ !member($NP,$Prev) && valid($NP) ]-> 
                                  ct($T,solve($NP,$Final,cp($NP,$Prev))) 
      !-> fail,

    valid(pos($B,$MV,$CW,$ME,$CE)) -> $MV >= 0 && $CW >=0 && $ME>=0 && $CE>=0
                          && ( equals($MV,0) || $MV >=$CW ) 
                          && ( equals($ME,0) || $ME>=$CE),
                          
       
   #get normal form for:
   # solve(pos(west, 3, 3, 0, 0), pos(east, 0, 0, 3, 3), nil)
    T1 -> solve(pos(west, 3, 3, 0, 0), pos(east, 0, 0, 3, 3), nil)

     ),BottomTop
    )
  )
 )
);
